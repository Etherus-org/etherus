package utils

import (
	"encoding/json"
	"errors"
	"io/ioutil"
	"os"
	"reflect"

	"github.com/ethereum/go-ethereum/core"
)

// defaultGenesisBlob is the JSON representation of the default
// genesis file in $GOPATH/src/github.com/ya-enot/etherus/setup/genesis.json
// nolint=lll
var defaultGenesisBlob = []byte(`
{
    "config": {
        "chainId": 32019,
        "homesteadBlock": 0,
        "byzantiumBlock": 0,
        "eip150Block": 0,
        "eip155Block": 0,
        "eip158Block": 0
    },
    "nonce": "0xdeadbeefdeadbeef",
    "timestamp": "0x00",
    "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "difficulty": "0x40",
    "gasLimit": "0x8000000",
    "alloc": {
		"0x0000000000000000000000000000000000000001": {	"balance": "1" },
		"0x0000000000000000000000000000000000000002": {	"balance": "1" },
		"0x0000000000000000000000000000000000000003": {	"balance": "1" },
		"0x0000000000000000000000000000000000000004": {	"balance": "1" },
		"0x0000000000000000000000000000000000000005": {	"balance": "1" },
		"0x0000000000000000000000000000000000000006": {	"balance": "1" },
		"0x0000000000000000000000000000000000000007": {	"balance": "1" },
		"0x0000000000000000000000000000000000000008": {	"balance": "1" },
		"0x0000000000000000000000000000000000000fff": {
			"balance": "250000000000000000000",
			"code": "0x6060604052600436106100b95763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b8604fc81146100be578063181a8d68146100f0578063241b71bb1461019c57806347fdd5f8146101c657806379354ef5146101ef5780637e332a46146102105780638e19899e1461022757806392c8a9661461023d5780639da0e3e314610253578063be1d05c214610269578063e1e158a51461027c578063faeedb61146102a1575b600080fd5b34156100c957600080fd5b6100d46004356102cf565b604051600160a060020a03909116815260200160405180910390f35b34156100fb57600080fd5b6101036102ea565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561014757808201518382015260200161012f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561018657808201518382015260200161016e565b5050505090500194505050505060405180910390f35b34156101a757600080fd5b6101b26004356103a6565b604051901515815260200160405180910390f35b34156101d157600080fd5b6101d96103c9565b60405160ff909116815260200160405180910390f35b34156101fa57600080fd5b61020e60043560243560ff604435166103ce565b005b61020e600435600160a060020a0360243516610500565b341561023257600080fd5b61020e60043561069f565b341561024857600080fd5b6101b260043561078a565b341561025e57600080fd5b61020e6004356107b2565b341561027457600080fd5b6101d961085d565b341561028757600080fd5b61028f610862565b60405190815260200160405180910390f35b34156102ac57600080fd5b6102b461086e565b60405165ffffffffffff909116815260200160405180910390f35b600090815260208190526040902054600160a060020a031690565b6102f2610ab9565b6102fa610ab9565b600280548060200260200160405190810160405280929190818152602001828054801561034757602002820191906000526020600020905b81548152600190910190602001808311610332575b50505050509150600180548060200260200160405190810160405280929190818152602001828054801561039b57602002820191906000526020600020905b81548152600190910190602001808311610386575b505050505090509091565b6000908152602081905260408120600101546601000000000000900460ff161190565b600181565b60006103d9846103a6565b1580156103ea57506103ea8461078a565b15156103f557600080fd5b600160ff8316101561040657600080fd5b33600160a060020a0316610419846102cf565b600160a060020a03161461042c57600080fd5b83831461046f5761043c8361078a565b801561044e575061044c836103a6565b155b151561045957600080fd5b60ff82166001141561046a57600080fd5b61047f565b60ff821660011461047f57600080fd5b50600083815260208190526040902060018101805465ffffffffffff19164365ffffffffffff161766ff0000000000001916660100000000000060ff8516021790556104cb8482610873565b600182810154815467010000000000000090910463ffffffff169081106104ee57fe5b60009182526020909120015550505050565b600082815260208190526040812080546bffffffffffffffffffffffff60a060020a8083048216340182168102600160a060020a03909316929092178084559293928392670de0b6b3a76400009104909116101561055d57600080fd5b8254600160a060020a0316151561059557825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161783555b61059f8584610873565b6001840154909250600067010000000000000090910463ffffffff1611156106255760018360010160079054906101000a900463ffffffff160390508460018263ffffffff168154811015156105f157fe5b6000918252602090912001556002805483919063ffffffff841690811061061457fe5b600091825260209091200155610698565b600180548082016106368382610acb565b50600091825260209091200185905560028054600181016106578382610acb565b50600091825260209091200182905560018054908401805463ffffffff909216670100000000000000026affffffff00000000000000199092169190911790555b5050505050565b6000806106ab8361078a565b15156106b657600080fd5b6106bf836103a6565b15156106ca57600080fd5b6000838152602081905260409020805490925033600160a060020a039081169116146106f557600080fd5b6001828101546601000000000000900460ff161461071257600080fd5b600182015465ffffffffffff438116918116600a0116111561073357600080fd5b50805460a060020a90046bffffffffffffffffffffffff16610754836108ce565b600160a060020a03331681156108fc0282604051600060405180830381858888f19350505050151561078557600080fd5b505050565b60009081526020819052604081205460a060020a90046bffffffffffffffffffffffff161190565b60006107bd826103a6565b15156107c857600080fd5b506000818152602081905260409020805433600160a060020a039081169116146107f157600080fd5b6001818101546601000000000000900460ff161461080e57600080fd5b60018101805466ffffffffffffff1916905561082a8282610873565b600182810154815467010000000000000090910463ffffffff1690811061084d57fe5b6000918252602090912001555050565b600281565b670de0b6b3a764000081565b600a81565b60018101549054660100000000000090910460ff167c01000000000000000000000000000000000000000000000000000000000264010000000060a060020a928390046bffffffffffffffffffffffff160490910217919050565b600081815260208190526040812080546001916002918490819060a060020a90046bffffffffffffffffffffffff1681901161090957600080fd5b84546000901161091557fe5b60018360010160079054906101000a900463ffffffff160391506001858054905011801561094e575084546000190163ffffffff831614155b15610a325784548590600019810190811061096557fe5b906000526020600020900154858363ffffffff1681548110151561098557fe5b6000918252602090912001558354849060001981019081106109a357fe5b906000526020600020900154848363ffffffff168154811015156109c357fe5b6000918252602090912001558454859063ffffffff84169081106109e357fe5b600091825260208083209190910154808352908890526040909120600190810180546affffffff00000000000000191667010000000000000092860163ffffffff169290920291909117905590505b845485906000198101908110610a4457fe5b60009182526020822001558454610a5f866000198301610acb565b50835484906000198101908110610a7257fe5b60009182526020822001558354610a8d856000198301610acb565b50505060009485525050506020526040812090815560010180546affffffffffffffffffffff19169055565b60206040519081016040526000815290565b81548183558181151161078557600083815260209020610785918101908301610b0891905b80821115610b045760008155600101610af0565b5090565b905600a165627a7a723058205b30e3050b69263da1534aae36f9d4c0fe5b2c1ab25816d46a0078abfd8191850029",
			"storage": {
				"5a6b60b29d258313d18682c2232260bf37d2b20c7b1b7904db1d61b495abb90f": "0000000d8d726b7177a800005b55f02698f044f87e4bd57d60dd27bde535767b",
				"0000000000000000000000000000000000000000000000000000000000000001": "0000000000000000000000000000000000000000000000000000000000000001",
				"b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6": "0f74eb8612eb017f9febbbdbd419ba2a122cf3abb01adb1e349ef306f6bc0c8e",
				"0000000000000000000000000000000000000000000000000000000000000002": "0000000000000000000000000000000000000000000000000000000000000001",
				"405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace": "000000000000000d8d726b710000000000000000000000000000000000000000",
				"5a6b60b29d258313d18682c2232260bf37d2b20c7b1b7904db1d61b495abb910": "0000000000000000000000000000000000000000000000000100000000000000"
			}
		},
        "0x7eff122b94897ea5b0e2a9abf47b86337fafebdc": { "balance": "10000000000000000000000000000000000" },
		"0x89713c7d8c15ab70f392eb2674fcd51ec8e8f83b": { "balance": "10000000000000000000000000000000000" },
		"0x5b55f02698f044f87e4bd57d60dd27bde535767b": { "balance": "10000000000000000000000000000000000" }
	  
    }
}`)

/* For state conversion
function toKV(o){
    let out = {}
    for(let v of Object.values(o)){
        out[v.key] = v.value
    }
    return JSON.stringify(out, null, '    ')
}*/

var blankGenesis = new(core.Genesis)

var errBlankGenesis = errors.New("could not parse a valid/non-blank Genesis")

// ParseGenesisOrDefault tries to read the content from provided
// genesisPath. If the path is empty or doesn't exist, it will
// use defaultGenesisBytes as the fallback genesis source. Otherwise,
// it will open that path and if it encounters an error that doesn't
// satisfy os.IsNotExist, it returns that error.
func ParseGenesisOrDefault(genesisPath string) (*core.Genesis, error) {
	var genesisBlob = defaultGenesisBlob[:]
	if len(genesisPath) > 0 {
		blob, err := ioutil.ReadFile(genesisPath)
		if err != nil && !os.IsNotExist(err) {
			return nil, err
		}
		if len(blob) >= 2 { // Expecting atleast "{}"
			genesisBlob = blob
		}
	}

	genesis := new(core.Genesis)
	if err := json.Unmarshal(genesisBlob, genesis); err != nil {
		return nil, err
	}

	if reflect.DeepEqual(blankGenesis, genesis) {
		return nil, errBlankGenesis
	}

	return genesis, nil
}
